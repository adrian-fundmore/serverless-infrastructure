service: aws-infa-examples
provider: aws
runtime: nodejs4.3
package:
    include:
        - src
functions:
    hello:
        handler: src/handler.hello
        vpc:
             # as of Aug 2016 - these variables must be set in serverless.env.yaml
            securityGroupIds:
                - ${LambdaExecSecurityGroup}
            subnetIds:
                - ${SubnetAPrivate}

resources:
    Resources:
      VPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: 10.0.0.0/16
          EnableDnsSupport: true
          EnableDnsHostnames: true
          InstanceTenancy: default
          Tags:
            - Key: Name
              Value: 10.0.0.0/16
      InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
          Tags:
            - Key: Name
              Value: 10.0.0.0/16

      VPCGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
          VpcId: { Ref: VPC }
          InternetGatewayId: { Ref: InternetGateway }

      SubnetAPublic:
        Type: AWS::EC2::Subnet
        Properties:
          AvailabilityZone: { "Fn::Select": ["0", {"Fn::GetAZs": ""}] }
          CidrBlock: 10.0.0.0/20
          MapPublicIpOnLaunch: true
          VpcId: { Ref: VPC }
          Tags:
            - Key: Name
              Value: A public
            - Key: Reach
              Value: public

      SubnetAPrivate:
        Type: AWS::EC2::Subnet
        Properties:
          AvailabilityZone: { "Fn::Select": ["0", {"Fn::GetAZs": ""}] }
          CidrBlock: 10.0.16.0/20
          VpcId: { Ref: VPC }
          Tags:
            - Key: Name
              Value: A private
            - Key: Reach
              Value: private

      RouteTablePublic:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: { Ref: VPC }
          Tags:
            - Key: Name
              Value: Public

      RouteTablePrivate:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: { Ref: VPC }
          Tags:
            - Key: Name
              Value: Private

      RouteTableAssociationAPublic:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: { Ref: SubnetAPublic }
          RouteTableId: { Ref: RouteTablePublic }

      RouteTableAssociationAPrivate:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: { Ref: SubnetAPrivate }
          RouteTableId: { Ref: RouteTablePrivate }

      RouteTablePublicInternetRoute:
        Type: AWS::EC2::Route
        DependsOn: VPCGatewayAttachment
        Properties:
          RouteTableId: { Ref: RouteTablePublic }
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: { Ref: InternetGateway }

      NetworkAclPublic:
        Type: AWS::EC2::NetworkAcl
        Properties:
          VpcId: { Ref: VPC }
          Tags:
            - Key: Name
              Value: Public

      NetworkAclPrivate:
        Type: AWS::EC2::NetworkAcl
        Properties:
          VpcId: { Ref: VPC }
          Tags:
            - Key: Name
              Value: Private

      SubnetNetworkAclAssociationAPublic:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
          SubnetId: { Ref: SubnetAPublic }
          NetworkAclId: { Ref: NetworkAclPublic }

      SubnetNetworkAclAssociationAPrivate:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
          SubnetId: { Ref: SubnetAPrivate }
          NetworkAclId: { Ref: NetworkAclPrivate }

      NetworkAclEntryInPublicAllowAll:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
          NetworkAclId: { Ref: NetworkAclPublic }
          RuleNumber: '99'
          Protocol: "-1"
          RuleAction: allow
          Egress: 'false'
          CidrBlock: 0.0.0.0/0

      NetworkAclEntryOutPublicAllowAll:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
          NetworkAclId: { Ref: NetworkAclPublic }
          RuleNumber: '99'
          Protocol: "-1"
          RuleAction: allow
          Egress: 'true'
          CidrBlock: 0.0.0.0/0

      NetworkAclEntryInPrivateAllowVPC:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
          NetworkAclId: { Ref: NetworkAclPrivate }
          RuleNumber: '99'
          Protocol: "-1"
          RuleAction: allow
          Egress: 'false'
          CidrBlock: 0.0.0.0/0

      NetworkAclEntryOutPrivateAllowVPC:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
          NetworkAclId: { Ref: NetworkAclPrivate }
          RuleNumber: '99'
          Protocol: "-1"
          RuleAction: allow
          Egress: 'true'
          CidrBlock: 0.0.0.0/0

      LambdaExecSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Lambda functions execute with this group
          VpcId: { Ref: VPC }
          Tags:
            - Key: Name
              Value: LambdaExecSecurityGroup

    # Doesn't appear to be supported currently
    Outputs:
      VPC:
        Description: VPC.
        Value: { Ref: VPC }
      SubnetAPublic:
        Description: Subnet A public.
        Value: { Ref: SubnetAPublic }
      SubnetAPrivate:
        Description: Subnet A private.
        Value: { Ref: SubnetAPrivate }
      RouteTablePrivate:
        Description: Route table private.
        Value: { Ref: RouteTablePrivate }
      RouteTablePublic:
        Description: Route table public.
        Value: { Ref: RouteTablePublic }
      LambdaExecSecurityGroup:
        Description: Route table public.
        Value: { Ref: LambdaExecSecurityGroup }
